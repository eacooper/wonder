function stimulus_draw_fixation(w,scr,dat,stm)
%
% draws binocular fixation nonius to the screen but doesn't flip it


% length of diagonal lines
fixationRadiusXPix2 = sqrt(((stm.fixationRadiusXPix).^2)/2);
fixationRadiusYPix2 = sqrt(((stm.fixationRadiusYPix).^2)/2);


% bg
Screen('FillRect', w, stm.glevel);

% central square - same size as dots
Screen('FillRect', w, stm.LEwhite, ...
    [scr.x_center_pix_left - stm.dotSizePix/2 ...
    scr.y_center_pix_left - stm.dotSizePix/2 ...
    scr.x_center_pix_left + stm.dotSizePix/2 ...
    scr.y_center_pix_left + stm.dotSizePix/2] );

Screen('FillRect', w, stm.REwhite, ...
    [scr.x_center_pix_right - stm.dotSizePix/2 ...
    scr.y_center_pix_right - stm.dotSizePix/2 ...
    scr.x_center_pix_right + stm.dotSizePix/2 ...
    scr.y_center_pix_right + stm.dotSizePix/2] );



% nonius lines

% horizontal
Screen('DrawLine', w, stm.REwhite, scr.x_center_pix_right - (scr.signRight*stm.fixationRadiusXPix), ...
    scr.y_center_pix_right, ...
    scr.x_center_pix_right - (scr.signRight*stm.dotSizePix/2 + 2), ...
    scr.y_center_pix_right , 2);

Screen('DrawLine', w, stm.LEwhite, scr.x_center_pix_left + (stm.dotSizePix/2 + 2), ...
    scr.y_center_pix_left, ...
    scr.x_center_pix_left + (stm.fixationRadiusXPix), ...
    scr.y_center_pix_left, 2);


% vertical
Screen('DrawLine', w, stm.REwhite, scr.x_center_pix_right, ...
    scr.y_center_pix_right  - (scr.signRight*stm.fixationRadiusYPix), ...
    scr.x_center_pix_right, ...
    scr.y_center_pix_right - (scr.signRight*stm.dotSizePix/2 + 2) , 2);

Screen('DrawLine', w, stm.LEwhite, scr.x_center_pix_left, ...
    scr.y_center_pix_left + (stm.dotSizePix/2 + 2), ...
    scr.x_center_pix_left, ...
    scr.y_center_pix_left + (stm.fixationRadiusYPix), 2);

% diagonal
Screen('DrawLine', w, stm.REwhite, scr.x_center_pix_right - (scr.signRight*fixationRadiusXPix2), ...
    scr.y_center_pix_right  - (scr.signRight*fixationRadiusYPix2), ...
    scr.x_center_pix_right + (scr.signRight*fixationRadiusXPix2), ...
    scr.y_center_pix_right  + (scr.signRight*fixationRadiusYPix2) , 2);

Screen('DrawLine', w, stm.REwhite, scr.x_center_pix_right - (scr.signRight*fixationRadiusXPix2), ...
    scr.y_center_pix_right  + (scr.signRight*fixationRadiusYPix2), ...
    scr.x_center_pix_right + (scr.signRight*fixationRadiusXPix2), ...
    scr.y_center_pix_right  - (scr.signRight*fixationRadiusYPix2) , 2);

Screen('DrawLine', w, stm.LEwhite, scr.x_center_pix_left - (fixationRadiusXPix2), ...
    scr.y_center_pix_left  - (fixationRadiusYPix2), ...
    scr.x_center_pix_left + (fixationRadiusXPix2), ...
    scr.y_center_pix_left  + (fixationRadiusYPix2) , 2);

Screen('DrawLine', w, stm.LEwhite, scr.x_center_pix_left - (fixationRadiusXPix2), ...
    scr.y_center_pix_left  + (fixationRadiusYPix2), ...
    scr.x_center_pix_left + (fixationRadiusXPix2), ...
    scr.y_center_pix_left  - (fixationRadiusYPix2) , 2);


% % vertical eye alignment lines
% Screen('DrawLine', w, stm.REwhite, scr.x_center_pix_right - (scr.signRight*stm.stimRadPix), ...
%     scr.y_center_pix_right, ...
%     scr.x_center_pix_right + (scr.signRight*stm.stimRadPix), ...
%     scr.y_center_pix_right , 2);
% 
% Screen('DrawLine', w, stm.LEwhite, scr.x_center_pix_left - (stm.stimRadPix), ...
%     scr.y_center_pix_left, ...
%     scr.x_center_pix_left + (stm.stimRadPix), ...
%     scr.y_center_pix_left , 2);
